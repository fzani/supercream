/***************************************************************************************************
// -- Generated by AlteraxGen 09/02/2010 12:43:38
// Version 1.0
***************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using SP.Core.Domain;
using SP.Core.DataInterfaces;

namespace SP.Data.LTS
{
    public class SpecialInvoiceHeaderDao : AbstractLTSDao<SpecialInvoiceHeader, int>, ISpecialInvoiceHeaderDao
    {
        public SpecialInvoiceHeaderDao()
        {
        }

        public SpecialInvoiceHeaderDao(LTSDataContext ctx)
            : base(ctx)
        {
        }

        public override SpecialInvoiceHeader GetById(int id)
        {
            return db.SpecialInvoiceHeader.Single<SpecialInvoiceHeader>(q => q.ID == id);
        }

        public string GenerateSpecialInvoiceNo()
        {
            return "INV-SP-" + (Convert.ToInt32(db.SpecialInvoiceHeader.Select(q => q.InvoiceNo.Substring(7, (q.InvoiceNo.Length - 7))).Max()) + 1);
        }

        public List<SpecialInvoiceHeader> GetSpecialHeaders(string orderNo,
           string invoiceNo,
           string customerName,
           DateTime dateFrom,
           DateTime dateTo,
           short orderStatus)
        {
            return FilterInvoices(
                orderNo,
                invoiceNo,
                customerName,
                dateFrom,
                dateTo,
                orderStatus)
                    .OrderByDescending(q => q.OrderDate)
                    .ToList<SpecialInvoiceHeader>();
        }

        private IQueryable<SpecialInvoiceHeader> FilterInvoices(
           string orderNo,
           string invoiceNo,
           string customerName,
           DateTime dateFrom,
           DateTime dateTo,
           short orderStatus)
        {
            IQueryable<SpecialInvoiceHeader> filteredInvoices;
            if (!String.IsNullOrEmpty(customerName))
            {
                filteredInvoices = (from si in db.SpecialInvoiceHeader
                                    join c in db.Customer on si.CustomerID equals c.ID
                                    where c.Name.Contains(customerName)
                                    select si).AsQueryable();
            }
            else
            {
                filteredInvoices = db.SpecialInvoiceHeader.AsQueryable();
            }

            if (!String.IsNullOrEmpty(orderNo))
            {
                filteredInvoices = filteredInvoices.Where<SpecialInvoiceHeader>(q => q.AlphaID.Contains(orderNo));
            }

            if (!String.IsNullOrEmpty(invoiceNo))
            {
                filteredInvoices = filteredInvoices.Where<SpecialInvoiceHeader>(q => q.InvoiceNo.Contains(invoiceNo));
            }

            if (dateFrom != DateTime.MinValue)
            {
                filteredInvoices = filteredInvoices.Where<SpecialInvoiceHeader>(q => q.OrderDate >= dateFrom);
            }

            if (dateTo != DateTime.MinValue)
            {
                filteredInvoices = filteredInvoices.Where<SpecialInvoiceHeader>(q => q.OrderDate >= dateTo);
            }

            if (orderStatus == 2)
            {
                filteredInvoices = filteredInvoices.Where<SpecialInvoiceHeader>((q => (q.OrderStatus == 2) || (q.OrderStatus == 3)));
            }
            else
            {
                filteredInvoices = filteredInvoices.Where<SpecialInvoiceHeader>(q => q.OrderStatus == 3);
            }

            return filteredInvoices;
        }

    }
}
