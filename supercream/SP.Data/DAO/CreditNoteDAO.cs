/***************************************************************************************************
// -- Generated by AlteraxGen 03/03/2010 11:19:48
// Version 1.0
***************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using SP.Core.Domain;
using SP.Core.DataInterfaces;

namespace SP.Data.LTS
{
    public class CreditNoteDao : AbstractLTSDao<CreditNote, int>, ICreditNoteDao
    {
        public CreditNoteDao()
        {
        }

        public CreditNoteDao(LTSDataContext ctx)
            : base(ctx)
        {
        }

        public string GenerateCreditNo()
        {
            if (db.SpecialInvoiceHeader.FirstOrDefault() == null)
            {
                return "CRN-1";
            }
            else
            {
                int maxInvoiceNo = (int)db.CreditNote.Select(q => Convert.ToInt32(q.Reference.Substring(4, q.Reference.Length - 4))).Max();
                return "CRN-" + (maxInvoiceNo + 1).ToString();
            }
        }

        public override CreditNote GetById(int id)
        {
            return db.CreditNote.Single<CreditNote>(q => q.ID == id);
        }

        public bool CreditNoteExistsByOrderId(int orderId)
        {
            return (db.CreditNote.Where<CreditNote>(q => q.OrderID == orderId).FirstOrDefault() != null) ? true : false;
        }

        public bool ReferenceExists(string referenceNo)
        {
            return (db.CreditNote.Where<CreditNote>(q => q.Reference == referenceNo).FirstOrDefault() != null) ? true : false;
        }

        public CreditNote GetByReferenceId(string referenceNo)
        {
            return db.CreditNote.Where<CreditNote>(q => q.Reference == referenceNo).SingleOrDefault<CreditNote>();
        }

        public List<CreditNoteDetails> SearchCreditNotes(string orderNo, string invoiceNo, string customerName, DateTime dateFrom, DateTime dateTo)
        {
            var creditNotes = (from o in db.OrderHeader
                               join ons in db.OrderNotesStatus on o.ID equals ons.OrderID
                               join cr in db.CreditNote on o.ID equals cr.OrderID
                               join c in db.Customer on o.CustomerID equals c.ID
                               select new CreditNoteDetails
                               {
                                   CreditNoteID = cr.ID,
                                   OrderID = o.ID,
                                   OrderNo = o.AlphaID,
                                   InvoiceNo = o.InvoiceNo,
                                   CustomerName = c.Name,
                                   DateCreated = cr.DateCreated,
                                   Reference = cr.Reference
                               });

            return FilterCreditNotes(creditNotes,
                    orderNo,
                    invoiceNo,
                    customerName,
                    dateFrom,
                    dateTo).OrderByDescending(q => q.DateCreated).ToList<CreditNoteDetails>();
        }

        private static IQueryable<CreditNoteDetails> FilterCreditNotes(IQueryable<CreditNoteDetails> creditNotes,
           string orderNo,
           string invoiceNo,
           string customerName,
           DateTime dateFrom,
           DateTime dateTo)
        {
            IQueryable<CreditNoteDetails> filteredCreditNotes = creditNotes;
            if (!String.IsNullOrEmpty(orderNo))
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.OrderNo.Contains(orderNo));
            }

            if (!String.IsNullOrEmpty(invoiceNo))
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.InvoiceNo.Contains(invoiceNo));
            }

            if (!String.IsNullOrEmpty(customerName))
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.CustomerName.Contains(customerName));
            }

            if (dateFrom != DateTime.MinValue)
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.DateCreated >= dateFrom);
            }

            if (dateTo != DateTime.MinValue)
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.DateCreated <= dateTo);
            }

            return filteredCreditNotes;
        }

        public InvoiceCreditNoteDetails GetInvoiceCreditDetails(int orderNo)
        {
            var invoiceTotal = Math.Round((from o in db.OrderHeader
                                           join ol in db.OrderLine on o.ID equals ol.OrderID
                                           select ol.Price * ol.NoOfUnits).Sum(), 2);

            decimal creditTotal = new decimal(0.0);
            
            var creditNotes = db.CreditNote.Where(q => q.OrderID == orderNo).DefaultIfEmpty<CreditNote>();           
            if (creditNotes.First() != null)
            {
                creditTotal = Math.Round((from o in db.CreditNote
                                          where o.OrderID == orderNo
                                          select o.CreditAmount).Sum(), 2);
            }

            return new InvoiceCreditNoteDetails
            {
                OrderID = orderNo,
                TotalInvoiceAmount = invoiceTotal,
                TotalAmountCredited = creditTotal,
                Balance = (invoiceTotal - creditTotal)
            };
        }            
   }
}
