/***************************************************************************************************
// -- Generated by AlteraxGen 06/05/2009 12:38:08
// Version 1.0
***************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using SP.Core.Domain;
using SP.Core.DataInterfaces;
using System.Data.Linq;

using SP.Core.Extensions;


namespace SP.Data.LTS
{
    public class OrderNotesStatusDao : AbstractLTSDao<OrderNotesStatus, int>, IOrderNotesStatusDao
    {
        public OrderNotesStatusDao()
        {
        }

        public OrderNotesStatusDao(LTSDataContext ctx)
            : base(ctx)
        {
        }

        public override OrderNotesStatus GetById(int id)
        {
            return db.OrderNotesStatus.Single<OrderNotesStatus>(q => q.ID == id);
        }

        public OrderNotesStatus GetByOrderId(int id)
        {
            return db.OrderNotesStatus.Single<OrderNotesStatus>(q => q.OrderID == id);
        }

        public void UpdatePaymentCompleted(int orderID, bool invoicePaymentComplete)
        {
            string sql;
            if (invoicePaymentComplete)
            {
                sql = String.Format("UPDATE OrderNotesStatus SET InvoicePaymentComplete = {0} WHERE OrderID = {1}", 1, orderID.ToString());
            }
            else
            {
                sql = String.Format("UPDATE OrderNotesStatus SET InvoicePaymentComplete = {0} WHERE OrderID = {1}", 0, orderID.ToString());
            }
            db.ExecuteCommand(sql);
        }

        public bool OrderStatusByOrderIDExists(int orderID)
        {
            return (db.OrderNotesStatus.SingleOrDefault<OrderNotesStatus>(q => q.OrderID == orderID) == null) ? false : true;
        }

        public bool OrderStatusByOrderIDAndOrderStatusExists(int orderID, int orderStatus)
        {
            return ((from oh in db.OrderHeader
                     join ons in db.OrderNotesStatus on oh.ID equals ons.OrderID
                     where ((oh.ID == orderID) && (oh.OrderStatus == orderStatus))
                     select ons).SingleOrDefault<OrderNotesStatus>() == null) ? false : true;
        }

        public List<VanDeliveryItem> InvoicesByDateAndVan(DateTime deliveryDate, int vanId)
        {
            return (from oh in db.OrderHeader
                    let item = ((SP.Core.Enums.OrderStatus)oh.OrderStatus).IsInvoice() ? oh.InvoiceNo : oh.DeliveryNoteNo
                    join ons in db.OrderNotesStatus on oh.ID equals ons.OrderID
                    where ((oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.InvoicePrinted
                    || oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.Invoice
                    || oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.DeliveryNote
                      || oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.DeliveryNotePrinted)
                       && oh.DeliveryDate == deliveryDate
                       && ons.VanID == vanId)
                    select new VanDeliveryItem { ID = oh.ID, Item = item }).ToList<VanDeliveryItem>();
        }

        public void UpdateVanForInvoice(int orderID, int vanID)
        {
            var command = String.Format("UPDATE OrderNotesStatus SET VanId = {0} WHERE OrderID = {1}", vanID.ToString(), orderID.ToString());
            db.ExecuteCommand(command);
        }

        public List<VanInvoiceCount> GetVanInvoiceCount(DateTime deliveryDate)
        {
            var query = (from oh in db.OrderHeader
                         let orderStatus = (SP.Core.Enums.OrderStatus)oh.OrderStatus
                         join ons in db.OrderNotesStatus
                             on oh.ID equals ons.OrderID
                         join v in db.Van
                             on ons.VanID equals v.ID
                         where oh.DeliveryDate == deliveryDate && (oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.InvoicePrinted
                                || oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.Invoice
                                || oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.DeliveryNote
                                || oh.OrderStatus == (short)SP.Core.Enums.OrderStatus.DeliveryNotePrinted)
                         group v by v.Description into result
                         select new VanInvoiceCount
                         {
                             VanDescription = result.Key,
                             InvoiceCount = result.Count()
                         }).ToList<VanInvoiceCount>();
            return query;
        }
    }
}
