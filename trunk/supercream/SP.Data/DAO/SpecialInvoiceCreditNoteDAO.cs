/***************************************************************************************************
// -- Generated by AlteraxGen 28/05/2010 17:29:05
// Version 1.0
***************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using SP.Core.Domain;
using SP.Core.DataInterfaces;

namespace SP.Data.LTS
{
    public class SpecialInvoiceCreditNoteDao : AbstractLTSDao<SpecialInvoiceCreditNote, int>, ISpecialInvoiceCreditNoteDao
    {
        #region Constructors

        public SpecialInvoiceCreditNoteDao()
        {
        }

        public SpecialInvoiceCreditNoteDao(LTSDataContext ctx)
            : base(ctx)
        {
        }

        #endregion

        #region Public Methods

        public override SpecialInvoiceCreditNote GetById(int id)
        {
            return db.SpecialInvoiceCreditNote.Single<SpecialInvoiceCreditNote>(q => q.ID == id);
        }

        public List<SpecialInvoiceCreditNoteDetails> SearchSpecialInvoiceCreditNotes(string orderNo, string invoiceNo, string customerName, DateTime dateFrom, DateTime dateTo)
        {
            var creditNotes = (from sih in db.SpecialInvoiceHeader
                               // join ons in db.OrderNotesStatus on o.ID equals ons.OrderID
                               join cr in db.SpecialInvoiceCreditNote on sih.ID equals cr.SpecialInvoiceID
                               join c in db.Customer on sih.CustomerID equals c.ID
                               where cr.IsVoid == false
                               select new SpecialInvoiceCreditNoteDetails
                               {
                                   CreditNoteID = cr.ID,
                                   SpecialInvoiceID = sih.ID,
                                   OrderNo = sih.AlphaID,
                                   InvoiceNo = sih.InvoiceNo,
                                   CustomerName = c.Name,
                                   DateCreated = cr.DateCreated,
                                   DueDate = cr.DueDate,
                                   Reference = cr.Reference
                               });

            return FilterCreditNotes(creditNotes,
                    orderNo,
                    invoiceNo,
                    customerName,
                    dateFrom,
                    dateTo).OrderByDescending(q => q.DateCreated).ToList<SpecialInvoiceCreditNoteDetails>();
        }

        public List<SpecialInvoiceCreditNote> GetSpecialInvoiceCreditNotesByInvoiceId(int specialInvoiceId)
        {
            return
                db.SpecialInvoiceCreditNote.Where<SpecialInvoiceCreditNote>(
                    q => (q.SpecialInvoiceID == specialInvoiceId) && (q.IsVoid == false)).ToList();
        }

        public string GenerateSpecialInvoiceCreditNo()
        {
            if (db.SpecialInvoiceCreditNote.FirstOrDefault() == null)
            {
                return "SP-CRN-1";
            }
            else
            {
                int maxInvoiceNo = (int)db.SpecialInvoiceCreditNote.Select(q => Convert.ToInt32(q.Reference.Substring(7, q.Reference.Length - 7))).Max();
                return "SP-CRN-" + (maxInvoiceNo + 1).ToString();
            }
        }

        public decimal GetSpecialInvoiceOustandingBalance(int specialInvoiceNo, int creditNote, decimal vatRate)
        {
            vatRate = (vatRate / 100) + 1;

            var creditTotal = new decimal(0.0);

            var creditNotes = db.SpecialInvoiceCreditNote.Where(q => (q.SpecialInvoiceID == specialInvoiceNo) && (q.IsVoid == false)).DefaultIfEmpty<SpecialInvoiceCreditNote>();
            if (creditNotes.First() != null)
            {
                var crCount = db.SpecialInvoiceCreditNote.Where(q => (q.SpecialInvoiceID == specialInvoiceNo) && (q.IsVoid == false)).Count();
                if (crCount > 1)
                {
                    // Check to see if Credit Note already exists
                    // In the case where Credit Note exists make sure that we do not include the original credit note balance 
                    // in the outstanding balance.
                    if (creditNote != -1)
                    {

                        creditTotal = Math.Round(((from cr in db.SpecialInvoiceCreditNote
                                                   where ((cr.SpecialInvoiceID == specialInvoiceNo) && (cr.IsVoid == false) && (cr.ID != creditNote))
                                                   select (cr.VatExempt ? cr.CreditAmount : cr.CreditAmount * vatRate))).
                                                     Sum(), 2);
                    }
                    else
                    {
                        creditTotal = Math.Round((from cr in db.SpecialInvoiceCreditNote
                                                  where ((cr.SpecialInvoiceID == specialInvoiceNo) && (cr.IsVoid == false))
                                                  select (cr.VatExempt ? cr.CreditAmount : cr.CreditAmount * vatRate)).Sum
                                                     (), 2);
                    }
                }
            }
            return creditTotal;
        }

        public bool SpecialInvoiceCreditNoteExistsByInvoiceId(int specialInvoiceId)
        {
            return (db.SpecialInvoiceCreditNote.Where<SpecialInvoiceCreditNote>(q => (q.SpecialInvoiceID == specialInvoiceId) && (q.IsVoid == false)).FirstOrDefault() != null) ? true : false;
        }

        public bool CheckIfReferenceExists(string referenceNo)
        {
            return (db.SpecialInvoiceCreditNote.Where<SpecialInvoiceCreditNote>(q => q.Reference == referenceNo).FirstOrDefault() != null) ? true : false;
        }

        public SpecialInvoiceCreditNote SpecialInvoiceGetByReferenceId(string reference)
        {
            return db.SpecialInvoiceCreditNote.Where<SpecialInvoiceCreditNote>(q => q.Reference == reference).SingleOrDefault<SpecialInvoiceCreditNote>();
        }

        public SpecialInvoiceCreditNoteBalance GetSpecialInvoiceCreditBalance(int specialInvoiceId, decimal vatRate)
        {
            if (CheckForInvoiceLines(specialInvoiceId) == false)
            {
                return new SpecialInvoiceCreditNoteBalance
                {
                    SpecialInvoiceID = specialInvoiceId,
                    TotalInvoiceAmount = new decimal(0.0),
                    TotalAmountCredited = new decimal(0.0), // including vat
                    Balance = new decimal(0.0)
                };
            }

            decimal invoiceTotal = GetInvoiceTotalIncludingVat(specialInvoiceId, vatRate);

            decimal creditTotal = GetCreditTotalIncudingVat(specialInvoiceId, vatRate);

            return new SpecialInvoiceCreditNoteBalance
            {
                SpecialInvoiceID = specialInvoiceId,
                TotalInvoiceAmount = invoiceTotal,
                TotalAmountCredited = creditTotal, // including vat
                Balance = (invoiceTotal - creditTotal)
            };
        }

        #endregion

        #region Private Helpers

        private static IQueryable<SpecialInvoiceCreditNoteDetails> FilterCreditNotes(IQueryable<SpecialInvoiceCreditNoteDetails> creditNotes,
         string orderNo,
         string invoiceNo,
         string customerName,
         DateTime dateFrom,
         DateTime dateTo)
        {
            IQueryable<SpecialInvoiceCreditNoteDetails> filteredCreditNotes = creditNotes;
            if (!String.IsNullOrEmpty(orderNo))
            {
                filteredCreditNotes = filteredCreditNotes.Where<SpecialInvoiceCreditNoteDetails>(q => q.OrderNo.Contains(orderNo));
            }

            if (!String.IsNullOrEmpty(invoiceNo))
            {
                filteredCreditNotes = filteredCreditNotes.Where<SpecialInvoiceCreditNoteDetails>(q => q.InvoiceNo.Contains(invoiceNo));
            }

            if (!String.IsNullOrEmpty(customerName))
            {
                filteredCreditNotes = filteredCreditNotes.Where<SpecialInvoiceCreditNoteDetails>(q => q.CustomerName.Contains(customerName));
            }

            if (dateFrom != DateTime.MinValue)
            {
                filteredCreditNotes = filteredCreditNotes.Where<SpecialInvoiceCreditNoteDetails>(q => q.DueDate >= dateFrom);
            }

            if (dateTo != DateTime.MinValue)
            {
                filteredCreditNotes = filteredCreditNotes.Where<SpecialInvoiceCreditNoteDetails>(q => q.DueDate <= dateTo);
            }

            return filteredCreditNotes;
        }

        private bool CheckForInvoiceLines(int specialInvoiceId)
        {
            return ((from o in db.SpecialInvoiceHeader
                     join ol in db.SpecialInvoiceLine on o.ID equals ol.SpecialInvoiceID
                     where ol.SpecialInvoiceID == specialInvoiceId
                     select ol.ID).Count() > 0);
        }

        private decimal GetCreditTotalIncudingVat(int specialInvoiceId, decimal vatRate)
        {
            var creditTotal = new decimal(0.0);

            var creditNotes = db.SpecialInvoiceCreditNote.Where(q => (q.SpecialInvoiceID == specialInvoiceId) && (q.IsVoid == false)).DefaultIfEmpty<SpecialInvoiceCreditNote>();
            if (creditNotes.First() != null)
            {
                creditTotal = Math.Round((from cr in db.SpecialInvoiceCreditNote
                                          where (cr.SpecialInvoiceID == specialInvoiceId) && (cr.IsVoid == false)
                                          select (cr.VatExempt ? cr.CreditAmount : cr.CreditAmount * (1 + ((decimal)vatRate / (decimal)100.0)))).Sum(), 2);
            }
            return creditTotal;
        }

        private decimal GetInvoiceTotalIncludingVat(int specialInvoiceId, decimal vatRate)
        {
            if (vatRate != 0)
            {
                vatRate = (vatRate / 100) + 1;
            }

            var invoiceLines = from o in db.SpecialInvoiceHeader
                               join ol in db.SpecialInvoiceLine on o.ID equals ol.SpecialInvoiceID
                               where o.ID == specialInvoiceId
                               select ol;

            var invoiceTotal = 0.0m;
            foreach (SpecialInvoiceLine line in invoiceLines)
            {
                decimal price = line.Price;
                if (price != 0)
                {
                    if (line.Discount != 0)
                    {
                        price -= Math.Round((price / 100) * line.Discount, 2);
                    }

                    price = Math.Round(line.VatExempt ? (price * line.NoOfUnits) : (price * line.NoOfUnits * vatRate), 2);

                }

                invoiceTotal += price;

            }

            invoiceTotal = Math.Round(invoiceTotal, 2);
            return invoiceTotal;
        }

        #endregion

    }
}
