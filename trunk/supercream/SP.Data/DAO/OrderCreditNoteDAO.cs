/***************************************************************************************************
// -- Generated by AlteraxGen 28/04/2010 22:21:37
// Version 1.0
***************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using SP.Core.Domain;
using SP.Core.DataInterfaces;

namespace SP.Data.LTS
{
    public class OrderCreditNoteDao : AbstractLTSDao<OrderCreditNote, int>, IOrderCreditNoteDao
    {
        public OrderCreditNoteDao()
        {
        }

        public OrderCreditNoteDao(LTSDataContext ctx)
            : base(ctx)
        {
        }

        public string GenerateCreditNo()
        {
            if (db.OrderCreditNote.FirstOrDefault() == null)
            {
                return "OCRN-1";
            }
            else
            {
                int maxInvoiceNo =
                    (int)
                    db.OrderCreditNote.Select(q => Convert.ToInt32(q.Reference.Substring(5, q.Reference.Length - 5))).Max();
                return "OCRN-" + (maxInvoiceNo + 1).ToString();
            }
        }

        public override OrderCreditNote GetById(int id)
        {
            return db.OrderCreditNote.Single<OrderCreditNote>(q => q.ID == id);
        }

        public List<OrderLine> AvailableOrderLinesForCreditNote(int orderId)
        {
            return (from ol in db.OrderLine
                    where (ol.OrderID == orderId)
                    select ol).ToList<OrderLine>();
        }

        public bool ReferenceExists(string referenceNo)
        {
            return (db.OrderCreditNote.Where<OrderCreditNote>(q => q.Reference == referenceNo).FirstOrDefault() != null) ? true : false;
        }

        public List<CreditNoteDetails> SearchCreditNotes(string orderNo, string invoiceNo, string customerName, DateTime dateFrom, DateTime dateTo)
        {
            var creditNotes = (from o in db.OrderHeader
                               join ons in db.OrderNotesStatus on o.ID equals ons.OrderID
                               join cr in db.OrderCreditNote on o.ID equals cr.OrderID
                               join c in db.Customer on o.CustomerID equals c.ID
                               select new CreditNoteDetails
                               {
                                   CreditNoteID = cr.ID,
                                   OrderID = o.ID,
                                   OrderNo = o.AlphaID,
                                   InvoiceNo = o.InvoiceNo,
                                   CustomerName = c.Name,
                                   DateCreated = cr.DateCreated,
                                   Reference = cr.Reference
                               });

            return FilterCreditNotes(creditNotes,
                    orderNo,
                    invoiceNo,
                    customerName,
                    dateFrom,
                    dateTo).OrderByDescending(q => q.DateCreated).ToList<CreditNoteDetails>();
        }

        private static IQueryable<CreditNoteDetails> FilterCreditNotes(IQueryable<CreditNoteDetails> creditNotes,
           string orderNo,
           string invoiceNo,
           string customerName,
           DateTime dateFrom,
           DateTime dateTo)
        {
            IQueryable<CreditNoteDetails> filteredCreditNotes = creditNotes;
            if (!String.IsNullOrEmpty(orderNo))
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.OrderNo.Contains(orderNo));
            }

            if (!String.IsNullOrEmpty(invoiceNo))
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.InvoiceNo.Contains(invoiceNo));
            }

            if (!String.IsNullOrEmpty(customerName))
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.CustomerName.Contains(customerName));
            }

            if (dateFrom != DateTime.MinValue)
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.DateCreated >= dateFrom);
            }

            if (dateTo != DateTime.MinValue)
            {
                filteredCreditNotes = filteredCreditNotes.Where<CreditNoteDetails>(q => q.DateCreated <= dateTo);
            }

            return filteredCreditNotes;
        }

        public InvoiceCreditNoteDetails GetInvoiceCreditDetails(int orderNo, decimal vatRate)
        {
            if (vatRate != 0)
            {
                vatRate = (vatRate / 100) + 1;
            }

            var invoiceTotal = Math.Round((from o in db.OrderHeader
                                           join ol in db.OrderLine on o.ID equals ol.OrderID
                                           join p in db.Product on ol.ProductID equals p.ID
                                           where o.ID == orderNo
                                           select (p.VatExempt ? (ol.Price * ol.NoOfUnits) : (ol.Price * ol.NoOfUnits * vatRate))).Sum(), 2);

            decimal creditTotal = new decimal(0.0);

            var creditNotes = db.CreditNote.Where(q => q.OrderID == orderNo).DefaultIfEmpty<CreditNote>();
            if (creditNotes.First() != null)
            {
                creditTotal = Math.Round((from cr in db.CreditNote
                                          where cr.OrderID == orderNo
                                          select (cr.VatExempt ? cr.CreditAmount : cr.CreditAmount * vatRate)).Sum(), 2);
            }

            decimal orderCreditTotal = new decimal(0.0);
            var orderCreditNotes = (from oh in db.OrderCreditNote
                                    join ol in db.OrderCreditNoteLine on oh.ID equals ol.OrderCreditNoteID
                                    where oh.OrderID == orderNo
                                    select oh).DefaultIfEmpty<OrderCreditNote>();
            if (orderCreditNotes.First() != null)
            {
                orderCreditTotal = Math.Round((from oh in db.OrderCreditNote
                                           join ol in db.OrderCreditNoteLine on oh.ID equals ol.OrderCreditNoteID
                                           join p in db.Product on ol.ProductID equals p.ID
                                           where oh.OrderID == orderNo
                                           select ((p.VatExempt) ? ol.Price * ol.NoOfUnits : ol.Price * ol.NoOfUnits * vatRate)).Sum(), 2);
            }

            creditTotal += orderCreditTotal;

            return new InvoiceCreditNoteDetails
            {
                OrderID = orderNo,
                TotalInvoiceAmount = invoiceTotal,
                TotalAmountCredited = creditTotal, // inclusing vat
                Balance = (invoiceTotal - creditTotal)
            };
        }
    }
}
